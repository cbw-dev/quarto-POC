[
  {
    "objectID": "intro/gen-form.html",
    "href": "intro/gen-form.html",
    "title": "General Formatting Examples",
    "section": "",
    "text": "This is a youtube link.\nThis is a link to the home page.\n\n\n\nThis is the bioinformatics.ca logo.\n\n\n\nbioinformatics.ca logo\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.",
    "crumbs": [
      "Introduction",
      "General Formatting Examples"
    ]
  },
  {
    "objectID": "intro/gen-form.html#links",
    "href": "intro/gen-form.html#links",
    "title": "General Formatting Examples",
    "section": "",
    "text": "This is a youtube link.\nThis is a link to the home page.",
    "crumbs": [
      "Introduction",
      "General Formatting Examples"
    ]
  },
  {
    "objectID": "intro/gen-form.html#images",
    "href": "intro/gen-form.html#images",
    "title": "General Formatting Examples",
    "section": "",
    "text": "This is the bioinformatics.ca logo.\n\n\n\nbioinformatics.ca logo",
    "crumbs": [
      "Introduction",
      "General Formatting Examples"
    ]
  },
  {
    "objectID": "intro/gen-form.html#callouts",
    "href": "intro/gen-form.html#callouts",
    "title": "General Formatting Examples",
    "section": "",
    "text": "Important\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.",
    "crumbs": [
      "Introduction",
      "General Formatting Examples"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the Quarto POC",
    "section": "",
    "text": "This is a Quarto website. This is the landing page - index.qmd.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n\n\n Back to top"
  },
  {
    "objectID": "content/day-1.html",
    "href": "content/day-1.html",
    "title": "Day 1",
    "section": "",
    "text": "Below is the rendered and completed version of Day 1’s R Markdown file. Begin with the empty version here. You will also need to download the following\n\nAbalone dataset\nWater Potability dataset",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#general-syntax",
    "href": "content/day-1.html#general-syntax",
    "title": "Day 1",
    "section": "General syntax",
    "text": "General syntax\nMultiple values can be stored into an object using the function c() for combine or concatenate\n\nprime &lt;- c(1, 3, 5, 7)\nprime\n\n[1] 1 3 5 7\n\n\nFunctions act on objects and can have additional parameters within the round brackets to specify how the command is carried out\n\nprime_mean &lt;- mean(prime)\nprime_mean\n\n[1] 4\n\n#mean() NOTE: BUG IN COMPLETED CODE, MEAN() REQUIRES PARAMETERS\n\nAll functions have default parameters that you can access using the help panel (same area as the “Files” and “Plots” panel) or using a ? before the function name\n\n?mean",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#getting-started-with-data",
    "href": "content/day-1.html#getting-started-with-data",
    "title": "Day 1",
    "section": "Getting started with data",
    "text": "Getting started with data\nData can be created de novo from within R or read in from an external object. Either way, there are a few broad categories of data types that you will encounter:\n\nVectors - 1 dimensional, for example the string of numbers in our prime object\nData frames - 2 dimensional, for example a table with rows of patients and columns for clinical characteristics\nLists - complex 1 dimensional, can store data of different types within a single object\n\nVectors can only hold one type of data within a single object\n\n# Numeric\nfirst5 &lt;- c(1:5)\nfirst5\n\n[1] 1 2 3 4 5\n\n# Character\nfruits &lt;- c('orange', \"apple\", \"banana\", \"grapefruit\", \"starfruit\")\nfruits\n\n[1] \"orange\"     \"apple\"      \"banana\"     \"grapefruit\" \"starfruit\" \n\n# Logical\n\nevaluate &lt;- 64 == 46\nevaluate\n\n[1] FALSE\n\n\n1 dimensional vectors can be used by themselves or used as the foundation for creating data frames\n\nfirstDF &lt;- data.frame(first5, fruits)\nfirstDF\n\n  first5     fruits\n1      1     orange\n2      2      apple\n3      3     banana\n4      4 grapefruit\n5      5  starfruit\n\nclass(firstDF)\n\n[1] \"data.frame\"\n\ncolnames(firstDF)\n\n[1] \"first5\" \"fruits\"\n\nrownames(firstDF)\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n\ndim(firstDF) # ALWAYS rows then columns\n\n[1] 5 2\n\n\nDataframes are the most common way of storing information. One of their major strengths is that you can access piece of information independently. Square brackets [] are used to access data within an object, always in the format of [rows,columns]. If you want to grab a specific row but all the columns of that row, you can leave the column specifier blank - but you always need the comma there regardless.\n\nprime[2]\n\n[1] 3\n\nfirstDF [2, 4] # [rows,col]\n\nNULL",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#importing-data",
    "href": "content/day-1.html#importing-data",
    "title": "Day 1",
    "section": "Importing data",
    "text": "Importing data\nRather than entering you data manually, you are more likely to read in data from an external source such as an output file from a machine or data stored in an excel table. R is pretty flexible with the files that it can accept, but there are differences to how it is read in.\nThe recommended format is a .csv file. This stands for “comma separated values”. This means columns are separated by commas and rows are separated by hard enters.\nIn this module, we will be working with an dataset measuring categorical and integral characteristics of abalone gathered in Australia\nSource:\nData comes from an original (non-machine-learning) study: Warwick J Nash, Tracy L Sellers, Simon R Talbot, Andrew J Cawthorn and Wes B Ford (1994) “The Population Biology of Abalone (Haliotis species) in Tasmania. I. Blacklip Abalone (H. rubra) from the North Coast and Islands of Bass Strait”, Sea Fisheries Division, Technical Report No. 48 (ISSN 1034-3288) https://archive.ics.uci.edu/ml/datasets/abalone\nData Set Information:\nPredicting the age of abalone from physical measurements. The age of abalone is determined by cutting the shell through the cone, staining it, and counting the number of rings through a microscope – a boring and time-consuming task. Other measurements, which are easier to obtain, are used to predict the age. Further information, such as weather patterns and location (hence food availability) may be required to solve the problem.\nAttribute Information:\nGiven is the attribute name, attribute type, the measurement unit and a brief description. The number of rings is the value to predict: either as a continuous value or as a classification problem.\nName / Data Type / Measurement Unit / Description\n\nSex / nominal / – / M, F, and I (infant)\nLength / continuous / mm / Longest shell measurement\nDiameter / continuous / mm / perpendicular to length\nHeight / continuous / mm / with meat in shell\nWhole weight / continuous / grams / whole abalone\nShucked weight / continuous / grams / weight of meat\nViscera weight / continuous / grams / gut weight (after bleeding)\nShell weight / continuous / grams / after being dried\nRings / integer / – / +1.5 gives the age in years\n\nAs this is a csv file, we will be using the aptly named function “read.csv()” to import the file into R. Make sure your abalone.csv file is in the same directory/folder as your .Rmd file. The first parameter the read.csv() function requires is the path to the file. This will just be the file name since they are both within the same folder.\nIf the dataset your working with is not in the same folder, you can modify the path to navigate through your directories to locate the file or use the Import Dataset button.\nNotice when we open the abalone dataset that the first row holds the column names rather than the first set of observations. We will need to let R know that there is a header in the parameters of the read.csv() function.\n\n#abalone &lt;- read.csv(\"anotherfolder//abalone.csv\", header = TRUE)\n#abalone &lt;- read.csv(\"C:/Users/Frances/Downloads/BioinformaticsWorkshop_INR_June2024-20240611T023701Z-001/BioinformaticsWorkshop_INR_June2024/abalone.csv\")\n#abalone &lt;- read.csv(\"datasets/abalone.csv\", header = TRUE)\n\n# Ok so all of these works, since we're building to the _build/html,\n# it doesn't matter, but the one below works in the R session,\n# so I think it will just depend on what we chose what the instructor will do\n\nabalone &lt;- read.csv(\"/Users/jqiu/Documents/CBWgithub/cbw-dev-test-pages/jupyter-book/INR-2024-Recreate-JB/datasets/abalone.csv\", header = TRUE)\n\n#abalone - commented out since it is a massive file\n\nIt is almost never useful to print out the whole table because humans are not good at inspecting numbers. Built in summary statistics are helpful for us to get an overview of the data.\n\nstr(abalone)\n\n'data.frame':   4177 obs. of  9 variables:\n $ Sex           : chr  \"M\" \"M\" \"F\" \"M\" ...\n $ Length        : num  0.455 0.35 0.53 0.44 0.33 0.425 0.53 0.545 0.475 0.55 ...\n $ Diameter      : num  0.365 0.265 0.42 0.365 0.255 0.3 0.415 0.425 0.37 0.44 ...\n $ Height        : num  0.095 0.09 0.135 0.125 0.08 0.095 0.15 0.125 0.125 0.15 ...\n $ Whole.weight  : num  0.514 0.226 0.677 0.516 0.205 ...\n $ Shucked.weight: num  0.2245 0.0995 0.2565 0.2155 0.0895 ...\n $ Viscera.weight: num  0.101 0.0485 0.1415 0.114 0.0395 ...\n $ Shell.weight  : num  0.15 0.07 0.21 0.155 0.055 0.12 0.33 0.26 0.165 0.32 ...\n $ Rings         : int  15 7 9 10 7 8 20 16 9 19 ...\n\nsummary(abalone)\n\n     Sex                Length         Diameter          Height      \n Length:4177        Min.   :0.075   Min.   :0.0550   Min.   :0.0000  \n Class :character   1st Qu.:0.450   1st Qu.:0.3500   1st Qu.:0.1150  \n Mode  :character   Median :0.545   Median :0.4250   Median :0.1400  \n                    Mean   :0.524   Mean   :0.4079   Mean   :0.1395  \n                    3rd Qu.:0.615   3rd Qu.:0.4800   3rd Qu.:0.1650  \n                    Max.   :0.815   Max.   :0.6500   Max.   :1.1300  \n  Whole.weight    Shucked.weight   Viscera.weight    Shell.weight   \n Min.   :0.0020   Min.   :0.0010   Min.   :0.0005   Min.   :0.0015  \n 1st Qu.:0.4415   1st Qu.:0.1860   1st Qu.:0.0935   1st Qu.:0.1300  \n Median :0.7995   Median :0.3360   Median :0.1710   Median :0.2340  \n Mean   :0.8287   Mean   :0.3594   Mean   :0.1806   Mean   :0.2388  \n 3rd Qu.:1.1530   3rd Qu.:0.5020   3rd Qu.:0.2530   3rd Qu.:0.3290  \n Max.   :2.8255   Max.   :1.4880   Max.   :0.7600   Max.   :1.0050  \n     Rings       \n Min.   : 1.000  \n 1st Qu.: 8.000  \n Median : 9.000  \n Mean   : 9.934  \n 3rd Qu.:11.000  \n Max.   :29.000  \n\n\nNotice for the sex of the observations, the summary is returning that there are characters in this column but not much else. Let’s take a look at the data in this column closer\nThe sting $ operator is used to access a column within a dataframe.\n\nhead(abalone$Sex, n=20) # object$columnName\n\n [1] \"M\" \"M\" \"F\" \"M\" \"I\" \"I\" \"F\" \"F\" \"M\" \"F\" \"F\" \"M\" \"M\" \"F\" \"F\" \"M\" \"I\" \"F\" \"M\"\n[20] \"M\"\n\nclass(abalone$Sex)\n\n[1] \"character\"\n\nabalone$Sex &lt;- as.character(abalone$Sex)\n\nAs a column of character values, the relationship between the observations being recorded as “M”, “F’, or”I” are not being recognized. We will need convert this column to factor.\n\nhead(as.factor(abalone$Sex))\n\n[1] M M F M I I\nLevels: F I M\n\nsummary(as.factor(abalone$Sex))\n\n   F    I    M \n1307 1342 1528 \n\n\nNow that we understand factors, let’s overwrite the column in the original dataset. Remember, there is no undo button in programming. Double check your work before you overwrite objects\n\nabalone$Sex &lt;- as.factor(abalone$Sex)\n\nhead(abalone)\n\n  Sex Length Diameter Height Whole.weight Shucked.weight Viscera.weight\n1   M  0.455    0.365  0.095       0.5140         0.2245         0.1010\n2   M  0.350    0.265  0.090       0.2255         0.0995         0.0485\n3   F  0.530    0.420  0.135       0.6770         0.2565         0.1415\n4   M  0.440    0.365  0.125       0.5160         0.2155         0.1140\n5   I  0.330    0.255  0.080       0.2050         0.0895         0.0395\n6   I  0.425    0.300  0.095       0.3515         0.1410         0.0775\n  Shell.weight Rings\n1        0.150    15\n2        0.070     7\n3        0.210     9\n4        0.155    10\n5        0.055     7\n6        0.120     8\n\n\n\nExercise 1 (10 mins)\nExplore the abalone dataset.\nA. Determine the sex of abalone (col) number 65, 85, and 99 (rows) B. Out of these three abalone, determine which of the three oysters is largest diameter C. Use the “mean()” function to determine the mean abalone diameter overall (not just the three)\nRemember: error messages are normal and part of the troubleshooting process. This is R’s way of communicating where to double check - not an indication of your ability to code! You’re doing great!\nTake down your green stickies at the start of this activity and put them up when you’re done and ready to re-group!\n\n# Hints to get you started:\n# Square brackets are used to access position: object[row,columns]\n# The function c() for combine or concatenate is needed when there are multiple inputs\n# Numeric values should not be enclosed in quotations, but character values require quotations.\n\nabalone$Diameter[c(65, 85, 99)]\n\n[1] 0.40 0.45 0.37\n\ncolnames(abalone)\n\n[1] \"Sex\"            \"Length\"         \"Diameter\"       \"Height\"        \n[5] \"Whole.weight\"   \"Shucked.weight\" \"Viscera.weight\" \"Shell.weight\"  \n[9] \"Rings\"         \n\nabalone[c(65, 85, 99), 3] #\"Diameter\"]\n\n[1] 0.40 0.45 0.37\n\nabalone_diameter &lt;- abalone[c(65, 85, 99), 3]\nabalone_diameter\n\n[1] 0.40 0.45 0.37\n\nmean(abalone$Diameter)\n\n[1] 0.4078813\n\n\nGood job writing your first investigative pieces of code! Woo hoo!",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#revising-the-r-environment",
    "href": "content/day-1.html#revising-the-r-environment",
    "title": "Day 1",
    "section": "Revising the R environment",
    "text": "Revising the R environment\nLet’s take a moment to revisit the Rstudio interface and the environment panel.\nWe’ve worked with a few objects at this point. The environment panel can give us an overview of the objects in the environment and allow us to preview dataframes.\nIf you would like to remove any objects, perhaps you made two objects that are very close in spelling and want to remove the incorrect object, you can use the function rm() for remove.\nAgain, this is an irreversible action - double check your work. If you’ve documented your code properly, you can always re-read in the object in case you mistakenly deleted anything you wanted to keep.\n\n#ABalone &lt;- \"blank\"\n\n#rm(ABalone)\n\nThe “object not found” error is a common one. In case you get this, you can refer to this environment tab to double check if it exists. Some common reasons this error message is triggered include:\n\nTypo mistakes (ex. firstDf vs firstDF)\nEmpty environment (ex. object need to be created everytime you open the document. If you save and close RStudio, the text in the .Rmd file will be preserved but not the virtual objects in the environment.)\n\nAs an overview of our environment, we can also use the sessionInfo() command. This is a good practice to have at the end of your code to document which packages you used and what version they were.\n\nsessionInfo()\n\nR version 4.4.1 (2024-06-14)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sonoma 14.7.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Toronto\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.1    fastmap_1.2.0     cli_3.6.3        \n [5] tools_4.4.1       htmltools_0.5.8.1 yaml_2.3.10       rmarkdown_2.28   \n [9] knitr_1.48        jsonlite_1.8.9    xfun_0.47         digest_0.6.37    \n[13] rlang_1.1.4       evaluate_1.0.1   \n\n\nNotice that we have some base packages active even though we did not explicitly call for them.",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#installing-packages-from-cran",
    "href": "content/day-1.html#installing-packages-from-cran",
    "title": "Day 1",
    "section": "Installing packages from CRAN",
    "text": "Installing packages from CRAN\nBefore we move on to a break, let’s revisit functions and packages. Functions are the commands we use to act on objects. As an open source software, anyone can develop new functions and package them into … packages to share with the community! Virtually anything you want to do - so does someone else!\nReferring back to my introduction presentation, R includes many pre-installed functions like c() and summary() that we’ve been using. But this is just the tip of the iceberg. We’ll be exploring a package called tidyverse developed to wrangle and reshape data. We will need to install this package only the first time we’re using it, similar to how we need to download a new app to our phones or computers before using it. Every time we want to use it, we still need to open it.\nMost general use packages are hosted on the CRAN network. Another package repository you will encounter specifically for biological applications is called Bioconductor (we won’t be using this for now). To download and install a package from CRAN, we will use another aptly named packaged called install.packages()\nSince R has not encountered the package before, we will need to use brackets around the name of the package we want to install\n\n#install.packages(\"tidyverse\")\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nOnce you have it installed, you can “open” them. You need to activate the library every new session of R.\nYou will likely see some warning messages – warnings are not error messages. - Error messages mean that R could not do what you asked it to and tries to explain the problem - Warning messages mean that R did what it think you wanted to do but wants to caution you to double check some parameters\nIn this case, the “Attaching packages” indicates the tidyverse package in opening other accompanying packages as well that it needs to function. “Conflicts” indicate that there are separate packages with functions of the same name and which one takes priority. To access a function from a specific package, you can use the syntax package::function()\n\nlibrary(tidyverse)",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#data-wrangling",
    "href": "content/day-1.html#data-wrangling",
    "title": "Day 1",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nMost of the raw data we work with starts off as what the computer considers messy. Perhaps there are some observations with incomplete data (columns are missing data) or there are multiple observations stored in each row (imagine a table with countries in the rows and a column for life expectancy in 1990 in one column and life expectancy in 2010 in the adjacent column).\nData wrangling is the process of data cleaning and reshaping the raw data into a more usable form. This can be a lengthy process, and can often not feel as rewarding as generating statistical analysis or beautiful plots. But this is the foundation of your analysis so it is worth the investment! Data wrangling can also be an intimidating task because there is no straight forward formula to follow. How you clean up your data depends on what you’re starting with, what research question you are trying to address, and which packages you’re using in your analysis.\nIn this section, we are going to get comfortable subseting the data and re-shaping dataframes. We’ll start by reminding ourselves how our dataset looks:\n\nhead(abalone)\n\n  Sex Length Diameter Height Whole.weight Shucked.weight Viscera.weight\n1   M  0.455    0.365  0.095       0.5140         0.2245         0.1010\n2   M  0.350    0.265  0.090       0.2255         0.0995         0.0485\n3   F  0.530    0.420  0.135       0.6770         0.2565         0.1415\n4   M  0.440    0.365  0.125       0.5160         0.2155         0.1140\n5   I  0.330    0.255  0.080       0.2050         0.0895         0.0395\n6   I  0.425    0.300  0.095       0.3515         0.1410         0.0775\n  Shell.weight Rings\n1        0.150    15\n2        0.070     7\n3        0.210     9\n4        0.155    10\n5        0.055     7\n6        0.120     8\n\nabalone$Sex &lt;- as.factor(abalone$Sex)\n\nIf we wanted to take a look at the summary statistics independently for infant vs mature, we can create multiple objects by subseting the original one.\nRemember for square brackets are indexing an object. For data frames, it is expecting two specifications separated by a comma, which rows followed by which columns.\n\nabalone_infants &lt;- abalone[abalone$Sex == \"I\", ] #object[rows, col]\n\nsummary(abalone_infants)\n\n Sex          Length          Diameter          Height       Whole.weight   \n F:   0   Min.   :0.0750   Min.   :0.0550   Min.   :0.000   Min.   :0.0020  \n I:1342   1st Qu.:0.3600   1st Qu.:0.2700   1st Qu.:0.085   1st Qu.:0.2055  \n M:   0   Median :0.4350   Median :0.3350   Median :0.110   Median :0.3840  \n          Mean   :0.4277   Mean   :0.3265   Mean   :0.108   Mean   :0.4314  \n          3rd Qu.:0.5100   3rd Qu.:0.3900   3rd Qu.:0.130   3rd Qu.:0.5994  \n          Max.   :0.7250   Max.   :0.5500   Max.   :0.220   Max.   :2.0495  \n Shucked.weight   Viscera.weight     Shell.weight         Rings      \n Min.   :0.0010   Min.   :0.00050   Min.   :0.00150   Min.   : 1.00  \n 1st Qu.:0.0900   1st Qu.:0.04250   1st Qu.:0.06413   1st Qu.: 6.00  \n Median :0.1698   Median :0.08050   Median :0.11300   Median : 8.00  \n Mean   :0.1910   Mean   :0.09201   Mean   :0.12818   Mean   : 7.89  \n 3rd Qu.:0.2704   3rd Qu.:0.13000   3rd Qu.:0.17850   3rd Qu.: 9.00  \n Max.   :0.7735   Max.   :0.44050   Max.   :0.65500   Max.   :21.00  \n\n\nWe can select for multiple values as well.\n\n#abalone_infants &lt;- abalone[abalone$Sex == \"I\", ]\n\nabalone_mature &lt;- abalone[abalone$Sex == c(\"F\", \"M\"), ]\n\nWarning in `==.default`(abalone$Sex, c(\"F\", \"M\")): longer object length is not\na multiple of shorter object length\n\n\nWarning in is.na(e1) | is.na(e2): longer object length is not a multiple of\nshorter object length\n\nsummary(abalone_mature)\n\n Sex         Length          Diameter          Height        Whole.weight   \n F:659   Min.   :0.1550   Min.   :0.1150   Min.   :0.0150   Min.   :0.0230  \n I:  0   1st Qu.:0.5150   1st Qu.:0.4000   1st Qu.:0.1350   1st Qu.:0.7127  \n M:763   Median :0.5800   Median :0.4600   Median :0.1550   Median :1.0100  \n         Mean   :0.5699   Mean   :0.4469   Mean   :0.1543   Mean   :1.0220  \n         3rd Qu.:0.6350   3rd Qu.:0.5000   3rd Qu.:0.1750   3rd Qu.:1.2971  \n         Max.   :0.8150   Max.   :0.6500   Max.   :0.5150   Max.   :2.8255  \n Shucked.weight   Viscera.weight    Shell.weight        Rings      \n Min.   :0.0085   Min.   :0.0050   Min.   :0.0050   Min.   : 3.00  \n 1st Qu.:0.2941   1st Qu.:0.1535   1st Qu.:0.2050   1st Qu.: 9.00  \n Median :0.4300   Median :0.2150   Median :0.2870   Median :10.00  \n Mean   :0.4430   Mean   :0.2232   Mean   :0.2928   Mean   :10.88  \n 3rd Qu.:0.5725   3rd Qu.:0.2874   3rd Qu.:0.3699   3rd Qu.:12.00  \n Max.   :1.3485   Max.   :0.7600   Max.   :0.8970   Max.   :29.00  \n\n\n\nExercise\nCreate a new object called abalone_small with only abalone with Whole.weight less than 1. Include only the columns Sex, Length, Diameter, and Whole.weight.\nYou can do this in one line or multiple lines, whichever you are most comfortable with! Take your time and check your work along the way using the summary() function.\n\n# object[rows, col]\n\ncolnames(abalone)\n\n[1] \"Sex\"            \"Length\"         \"Diameter\"       \"Height\"        \n[5] \"Whole.weight\"   \"Shucked.weight\" \"Viscera.weight\" \"Shell.weight\"  \n[9] \"Rings\"         \n\nabalone_small &lt;- abalone[abalone$`Whole.weight` &lt;1, c(1, 2, 3, 5)]\nabalone_small &lt;- abalone[abalone$Whole.weight &lt;1, c(\"Sex\", \"Length\", \"Diameter\", \"Whole.weight\")]\n\n\nsummary(abalone_small)\n\n Sex          Length          Diameter      Whole.weight   \n F: 614   Min.   :0.0750   Min.   :0.055   Min.   :0.0020  \n I:1293   1st Qu.:0.4000   1st Qu.:0.305   1st Qu.:0.3040  \n M: 798   Median :0.4800   Median :0.375   Median :0.5420  \n          Mean   :0.4613   Mean   :0.356   Mean   :0.5358  \n          3rd Qu.:0.5400   3rd Qu.:0.420   3rd Qu.:0.7800  \n          Max.   :0.6350   Max.   :0.510   Max.   :0.9995",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#adding-new-columns-of-data",
    "href": "content/day-1.html#adding-new-columns-of-data",
    "title": "Day 1",
    "section": "Adding new columns of data",
    "text": "Adding new columns of data\nNew columns can also be created if you wanted to add more information to the dataset\n\nabalone$maturity &lt;- \"mature\"\n\ntable(abalone$maturity)\n\n\nmature \n  4177 \n\nabalone[abalone$Sex == \"I\", \"maturity\"] &lt;- \"infant\"\n\ntable(abalone$maturity)\n\n\ninfant mature \n  1342   2835 \n\ntable(abalone$maturity, abalone$Sex)\n\n        \n            F    I    M\n  infant    0 1342    0\n  mature 1307    0 1528\n\n\nRemember that operations can be done on whole columns as well!!\n\nabalone$Percent.weight &lt;- abalone$Shucked.weight/abalone$Shell.weight\n\nhead(abalone)\n\n  Sex Length Diameter Height Whole.weight Shucked.weight Viscera.weight\n1   M  0.455    0.365  0.095       0.5140         0.2245         0.1010\n2   M  0.350    0.265  0.090       0.2255         0.0995         0.0485\n3   F  0.530    0.420  0.135       0.6770         0.2565         0.1415\n4   M  0.440    0.365  0.125       0.5160         0.2155         0.1140\n5   I  0.330    0.255  0.080       0.2050         0.0895         0.0395\n6   I  0.425    0.300  0.095       0.3515         0.1410         0.0775\n  Shell.weight Rings maturity Percent.weight\n1        0.150    15   mature       1.496667\n2        0.070     7   mature       1.421429\n3        0.210     9   mature       1.221429\n4        0.155    10   mature       1.390323\n5        0.055     7   infant       1.627273\n6        0.120     8   infant       1.175000",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#tidyverse",
    "href": "content/day-1.html#tidyverse",
    "title": "Day 1",
    "section": "Tidyverse",
    "text": "Tidyverse\nTidyverse is a collection of packages, or an “umbrella-package” the installs tidyr, dplyr, ggplot2, and several other related packages for tidying up your data.\nKeep in mind that tidyverse creates their own rules for R and their functions work well with their own functions, but may not translate to work well with other packages build by different developers. For example, the core developer strongly believes that rownames are not useful and all the information should be stored in columns within the table so converting your data frame to their object variation called tibbles will automatically remove rownames without warnings.\nRather than using square brackets to subset columns, we can select the rows that we want\n\n#select(abalone, Diameter, Length, Whole.weight) #Tidyverse selecting columns       - COMMENTED OUT DUE TO SIZE ON WINDOW\n\n#abalone$Diameter #base R      - COMMENTED OUT DUE TO SIZE ON WINDOW\n\nselect can also be used to exclude specific columns\n\n#select(abalone, -Length, -Diameter)      - COMMENTED OUT DUE TO SIZE ON WINDOW\n\nSelect only works on columns. We can use a similar function to filter for the rows that we want\n\n# Filter indexes rows\n\n#filter(abalone, Sex == \"I\") # abalone[abalone$Sex == \"I\", ]      - COMMENTED OUT DUE TO SIZE ON WINDOW\nsummary(filter(abalone, Sex == c(\"I\")))\n\n Sex          Length          Diameter          Height       Whole.weight   \n F:   0   Min.   :0.0750   Min.   :0.0550   Min.   :0.000   Min.   :0.0020  \n I:1342   1st Qu.:0.3600   1st Qu.:0.2700   1st Qu.:0.085   1st Qu.:0.2055  \n M:   0   Median :0.4350   Median :0.3350   Median :0.110   Median :0.3840  \n          Mean   :0.4277   Mean   :0.3265   Mean   :0.108   Mean   :0.4314  \n          3rd Qu.:0.5100   3rd Qu.:0.3900   3rd Qu.:0.130   3rd Qu.:0.5994  \n          Max.   :0.7250   Max.   :0.5500   Max.   :0.220   Max.   :2.0495  \n Shucked.weight   Viscera.weight     Shell.weight         Rings      \n Min.   :0.0010   Min.   :0.00050   Min.   :0.00150   Min.   : 1.00  \n 1st Qu.:0.0900   1st Qu.:0.04250   1st Qu.:0.06413   1st Qu.: 6.00  \n Median :0.1698   Median :0.08050   Median :0.11300   Median : 8.00  \n Mean   :0.1910   Mean   :0.09201   Mean   :0.12818   Mean   : 7.89  \n 3rd Qu.:0.2704   3rd Qu.:0.13000   3rd Qu.:0.17850   3rd Qu.: 9.00  \n Max.   :0.7735   Max.   :0.44050   Max.   :0.65500   Max.   :21.00  \n   maturity         Percent.weight   \n Length:1342        Min.   : 0.1641  \n Class :character   1st Qu.: 1.2585  \n Mode  :character   Median : 1.4563  \n                    Mean   : 1.5092  \n                    3rd Qu.: 1.6752  \n                    Max.   :15.7143  \n\n\nFunctions within the tidyverse universe do not require quotations around column names - this is unique to tidyverse packages and does not translate to other applications!\nAnother unique aspect of tidyverse is that their commands can be chained together using the pipe %&gt;%. This cumbersome chain of characters can be inserted with the shortcut cnt/cmd + shift + M.\nLet’s recreate the same object of abalone_small first with intermediate objects\nReminder of the object requirements: - Whole.weight under 1 - Columns Length, Diameter, and Whole.weight\n\nabalone_sub1 &lt;- filter(abalone, Whole.weight &lt; 1)\n\nabalone_sub2 &lt;- select(abalone_sub1, Length, Diameter, Whole.weight)\n\nsummary(abalone_sub2)\n\n     Length          Diameter      Whole.weight   \n Min.   :0.0750   Min.   :0.055   Min.   :0.0020  \n 1st Qu.:0.4000   1st Qu.:0.305   1st Qu.:0.3040  \n Median :0.4800   Median :0.375   Median :0.5420  \n Mean   :0.4613   Mean   :0.356   Mean   :0.5358  \n 3rd Qu.:0.5400   3rd Qu.:0.420   3rd Qu.:0.7800  \n Max.   :0.6350   Max.   :0.510   Max.   :0.9995  \n\n\nNow we’re going to combine this all together into one call\n\nabalone_sub3 &lt;- abalone %&gt;%\n  filter(Whole.weight &lt; 1) %&gt;%\n  select(Length, Diameter, Whole.weight)\n\nhead(abalone_sub3)\n\n  Length Diameter Whole.weight\n1  0.455    0.365       0.5140\n2  0.350    0.265       0.2255\n3  0.530    0.420       0.6770\n4  0.440    0.365       0.5160\n5  0.330    0.255       0.2050\n6  0.425    0.300       0.3515\n\nsummary(abalone_sub3)\n\n     Length          Diameter      Whole.weight   \n Min.   :0.0750   Min.   :0.055   Min.   :0.0020  \n 1st Qu.:0.4000   1st Qu.:0.305   1st Qu.:0.3040  \n Median :0.4800   Median :0.375   Median :0.5420  \n Mean   :0.4613   Mean   :0.356   Mean   :0.5358  \n 3rd Qu.:0.5400   3rd Qu.:0.420   3rd Qu.:0.7800  \n Max.   :0.6350   Max.   :0.510   Max.   :0.9995  \n\n\nThe functions are the same but since we are piping the results of the previous line to the next command, you do not need to (and should not) specify the object as the first argument in the function.\ngroup_by() and summarize() functions can be used to get summary statistics without the need to create intermediate objects\n\nabalone_sub3 &lt;- abalone %&gt;%\n  filter(Whole.weight &lt; 1) %&gt;%\n  select(Length, Diameter, Whole.weight, Sex) %&gt;%\n  group_by(Sex) %&gt;%\n  summarize(my_own_function = median(Whole.weight))\n\nabalone_sub3\n\n# A tibble: 3 × 2\n  Sex   my_own_function\n  &lt;fct&gt;           &lt;dbl&gt;\n1 F               0.707\n2 I               0.370\n3 M               0.694\n\n\n\nExercise\nUsing the base abalone object and tidyverse functions, investigate whether the mean length of male or females (group_by) are longer of abalone with a Shucked.weight greater than 0.3 AND a Shell.weight less than 0.3 (filtering rows) .\nInclude a checkpoint in your summarize call to make sure your filter worked.\n\nabalone %&gt;%\n  filter(Shucked.weight &gt; 0.3, Shell.weight &lt; 0.3) %&gt;%\n  group_by(Sex) %&gt;%\n  summarize(mean_Length = mean(Length),\n            min_Shucked = min(Shucked.weight))\n\n# A tibble: 3 × 3\n  Sex   mean_Length min_Shucked\n  &lt;fct&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1 F           0.569       0.300\n2 I           0.547       0.300\n3 M           0.567       0.301\n\n\nLastly, we can also use mutate() to add a new column of information based on existing data.\n\nabalone %&gt;%\n  mutate(Whole.weight.oz = Whole.weight*0.035) %&gt;%\n  head()\n\n  Sex Length Diameter Height Whole.weight Shucked.weight Viscera.weight\n1   M  0.455    0.365  0.095       0.5140         0.2245         0.1010\n2   M  0.350    0.265  0.090       0.2255         0.0995         0.0485\n3   F  0.530    0.420  0.135       0.6770         0.2565         0.1415\n4   M  0.440    0.365  0.125       0.5160         0.2155         0.1140\n5   I  0.330    0.255  0.080       0.2050         0.0895         0.0395\n6   I  0.425    0.300  0.095       0.3515         0.1410         0.0775\n  Shell.weight Rings maturity Percent.weight Whole.weight.oz\n1        0.150    15   mature       1.496667       0.0179900\n2        0.070     7   mature       1.421429       0.0078925\n3        0.210     9   mature       1.221429       0.0236950\n4        0.155    10   mature       1.390323       0.0180600\n5        0.055     7   infant       1.627273       0.0071750\n6        0.120     8   infant       1.175000       0.0123025\n\n# abalone$Whole.weight.oz &lt;- abalone$whole.weight*0.035",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#plotting-with-base-r",
    "href": "content/day-1.html#plotting-with-base-r",
    "title": "Day 1",
    "section": "Plotting with Base R",
    "text": "Plotting with Base R\nJust like how there are multiple ways of wrangling data (base R functions vs Tidyverse functions), there are also multiple ways of generating plots. We will start with base R plots.\nBefore we get started, it is always good to take a peek at the data and remind ourselves of what we’re working with\n\nhead(abalone)\n\n  Sex Length Diameter Height Whole.weight Shucked.weight Viscera.weight\n1   M  0.455    0.365  0.095       0.5140         0.2245         0.1010\n2   M  0.350    0.265  0.090       0.2255         0.0995         0.0485\n3   F  0.530    0.420  0.135       0.6770         0.2565         0.1415\n4   M  0.440    0.365  0.125       0.5160         0.2155         0.1140\n5   I  0.330    0.255  0.080       0.2050         0.0895         0.0395\n6   I  0.425    0.300  0.095       0.3515         0.1410         0.0775\n  Shell.weight Rings maturity Percent.weight\n1        0.150    15   mature       1.496667\n2        0.070     7   mature       1.421429\n3        0.210     9   mature       1.221429\n4        0.155    10   mature       1.390323\n5        0.055     7   infant       1.627273\n6        0.120     8   infant       1.175000\n\n\nRemember that the first column of abalone Sex was originally were character values but we wrangled this data into factors to recognize that there are relationships between observations with the same values (ie. all the abalone with a value “M” in the Sex column share the same biological Sex)\nBase R plots are great for taking a quick peek at your data\n\nplot(abalone$Length, abalone$Whole.weight)\n\n\n\n\n\n\n\n\n\nplot(abalone$Length, abalone$Whole.weight, col = abalone$Sex)\n\n\n\n\n\n\n\n\nNote that you cannot color on a column of categorical data if it is not a factor because each entry is considered unique, there are no shared characteristics between the observations.\nIt can be confusing to figure out which color corresponds to which category in base R.\n\nclass(abalone$Sex)\n\n[1] \"factor\"\n\nlevels(abalone$Sex)\n\n[1] \"F\" \"I\" \"M\"\n\n\nLet’s make a table to specify the color we want each level to be\n\nplot(abalone$Length, abalone$Whole.weight, col=abalone$Sex,\n     main = \"Abalone weight increases with length\",\n     xlab = \"Length (mm)\",\n     ylab = \"Whole weight (g)\")\n\nlegend(x=\"bottomright\",\n       legend = levels(abalone$Sex),\n       col = 1:3,\n       pch = 5\n       )\n\n\n\n\n\n\n\n\nBase R plots use layers so the base plot() must be created first, before the legend() layer is added on top.\nI stands for infant so it makes sense that they would be smaller in weight and length compared to the mature abalone.\nBefore we move on to the next type of plot, let’s customize it a bit more by cleaning up the axis",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#scatterplot-with-ggplot",
    "href": "content/day-1.html#scatterplot-with-ggplot",
    "title": "Day 1",
    "section": "Scatterplot with ggplot",
    "text": "Scatterplot with ggplot\nggplot() was created to support customizable and reproducible plots. The way that the ggplot() function accepts the data is much different from the base R plot() function.\nThe both columns of data must be in the same dataframe and specified in the data parameter. Then, the x and y axis must be specified using the aesthetic aes parameter. The base ggplot() call only holds the data, the geometry or format of the plot must be further specified by a separate call.\nWhile commas , separate the parameters in a function, plus signs + are used to specify different layers of the plot.\nThis is the basic template for ggplots:\n\nggplot(data = , mapping = aes()) + ()\n\n\nlibrary(ggplot2)\n\nA single continuous variable can be displayed using a histogram.\n\nggplot(data = abalone, mapping = aes(x=Length)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nnrow(abalone)\n\n[1] 4177\n\n\nTwo continuous variables can be contrasted using a point or scatter plot.\n\nggplot(abalone, aes(x = Length, y = Whole.weight)) +\n  geom_point()\n\n\n\n\n\n\n\n\nIt is a lot simpler to add color to ggplots\n\nggplot(abalone, aes(x = Length, y = Whole.weight, col = Sex)) +\n  geom_point()\n\n\n\n\n\n\n\n\nThere’s a lot of dots that are piling up on top of each other so we can change the alpha value to modify the transparency. Remember, you can always look up more information about each function using the ? or looking online! No need to memorize everything!\n\nggplot(abalone, aes(x = Length, y = Whole.weight, col = Sex)) +\n  geom_point(alpha = 0.3)",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#exercise-2",
    "href": "content/day-1.html#exercise-2",
    "title": "Day 1",
    "section": "Exercise",
    "text": "Exercise\nCreate a plot to investigate the relationship between the shucked weight and the shell weight of ONLY adult abalone (exclude the infant abalones). Color the plot by Sex, do you notice any difference between the two?\n\nabalone_MF &lt;- abalone[abalone$Sex %in% c(\"M\", \"F\"), ]\n\nggplot(abalone_MF, aes(x=Shucked.weight, y = Shell.weight, col = Sex)) +\n  geom_point()\n\n\n\n\n\n\n\n\nLet’s take a closer look at categorical data. One categorical data can be displayed with a bar plot. This is helpful when we are looking to see if we have equal representation in each of the sample groups.\n\nggplot(abalone, aes(x= Sex, fill = Sex)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nBar plots can also be easily modified.\n\nggplot(abalone, aes(x= Sex, fill = Sex)) +\n  geom_bar(width = 0.5) +\n  coord_flip()\n\n\n\n\n\n\n\n\nLastly, boxplots are used to describe the relationship between a continuous and a categorical variable.\n\nggplot(abalone, aes(x = Sex, y = Whole.weight)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThis more clearly shows that the weight distribution is comparable between the males and females. However, it would be clearer to have the F and M bars adjacent for comparison.\n\nlevels(abalone$Sex)\n\n[1] \"F\" \"I\" \"M\"\n\nabalone$Sex &lt;- factor(abalone$Sex, levels = c(\"I\", \"F\", \"M\"))\n\nggplot(abalone, aes(x = Sex, y = Whole.weight)) +\n  geom_boxplot() +\n  theme_classic()",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#multi-panel-plots-with-ggplot",
    "href": "content/day-1.html#multi-panel-plots-with-ggplot",
    "title": "Day 1",
    "section": "Multi-panel plots with ggplot",
    "text": "Multi-panel plots with ggplot\nPlots can be saved as objects\n\np1 &lt;- ggplot(abalone_MF, aes(x=Shucked.weight, y = Shell.weight, col = Sex)) +\n  geom_point()\n\np2 &lt;- ggplot(abalone, aes(x = Sex, y = Whole.weight)) +\n  geom_boxplot() +\n  theme_classic()\n\np1\n\n\n\n\n\n\n\n\nRather than flipping between separating plots and stitching them together afterwards in a photo editor, we can arrange them into a figure panel all together in R\n\n#install.packages(\"cowplot\")\nlibrary(cowplot)\n\n\nAttaching package: 'cowplot'\n\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\nplot_grid(p1, p2)\n\n\n\n\n\n\n\n\nLet’s clean this up a bit\n\ntop_row &lt;- plot_grid(p1 + theme_classic(),\n          p2,\n          labels = c(\"A\", \"B\"),\n          label_size = 20)\n\ntop_row\n\n\n\n\n\n\n\n\nAdding a third plot to play around with the distribution between panels\nWe want p1 to be larger by itself in the top row and then p2 and p3 split in the bottom row.\n\np3 &lt;- ggplot(abalone, aes(Sex)) + geom_bar()\n\nplot_grid(top_row, p3, ncol=1,\n          labels = c(\"\", \"C\"),\n          label_size = 20)",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#exporting-plots",
    "href": "content/day-1.html#exporting-plots",
    "title": "Day 1",
    "section": "Exporting plots",
    "text": "Exporting plots\n\ngetwd()\n\n[1] \"/Users/jqiu/Documents/CBWgithub/cbw-dev-test-pages/Quarto/quarto-POC/content\"\n\n\n\n# ok originally this was png(file = \"./INR_fig1.png\", bg = \"transparent\"), but I don't think we should have random images in the main folders, so we should tell\n# instructors to make any produced files go to a specific directory\n#png(file = \"./images/INR_fig1.png\", bg = \"transparent\")\ntop_row\n\n\n\n\n\n\n\ndev.off()\n\nnull device \n          1",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-1.html#day-1-project",
    "href": "content/day-1.html#day-1-project",
    "title": "Day 1",
    "section": "Day 1 Project",
    "text": "Day 1 Project\nFor this mini guided project, we will be working with a dataset quantifying water quality that is publicly available at: https://www.kaggle.com/datasets/adityakadiwal/water-potability?resource=download\nHere is some description of the data:\nAccess to safe drinking-water is essential to health, a basic human right and a component of effective policy for health protection. This is important as a health and development issue at a national, regional and local level. In some regions, it has been shown that investments in water supply and sanitation can yield a net economic benefit, since the reductions in adverse health effects and health care costs outweigh the costs of undertaking the interventions. Content\nThe water_potability.csv file contains water quality metrics for 3276 different water bodies. More information about each of the columns can be found in the link above\npH value Hardness Solids (Total dissolved solids - TDS) Chloramines Sulfate Conductivity Organic_carbon Trihalomethanes Turbidity Potability\nInsert a code chunk underneath each step to carry out the instruction.\n\nRead in the “water_potability.csv” data into an object called data Check the object you created by printing out the first 10 rows and applying the summary function.\nNotice that the pH column contains a couple hundred NA values. NA are special values in R (like how “pi” is preset to a value of 3.14159…) to indicate that there is missing data, or it is not available. There are also some NAs in the Sulfate and Trihalomethanes columns.\n\nCreate new object called water_df that only contains complete observations.\nHint: take a look at the function called na.omit(). In most cases, someone’s already done what you’ve wanted to do so there may already be code or functions that you can adapt and use!\n\nThe Potability column has two possible values: 1 means Potable and 0 means Not potable.\n\nIt is read in by default as a character vector. Convert this column to a factor.\n\nWHO has recommended maximum permissible limit of pH in drinking water from 6.5 to 8.5.\n\nCreate a new column within the water_df object called ph_category in which:\n\nObservations with a pH less than 6.5 have a value of acidic in the ph_category\nObservations with a pH betwee 6.5 - 8.5 have a value of permissible in the ph_category\nObservations with a pH greater than 8.5 have a value of basic in the ph_category\n\nThere are multiple ways to do this, give it a go! You can’t break the object - if you ever feel like you need a reset, you can always repeat step 1 to read in the object again.\nUse table() or summary() to check the values in the ph_category column\n\nCreate a plot to double check if the annotations in the ph_category column were applied correctly. Make sure to represent both the ph and ph_category columns.\n\nYou’re welcome to use base R or ggplot functions. There are multiple ways of representing these two columns. ggplot is slightly preferred because of its increased customization so it’s good to get some practice with it!\n\nThe levels of sulfates and water hardness cause by salts should be minimized in order to be safe for consumption.\n\nCreate a plot with the level of water hardness on the x axis and sulphate on the y axis colored by the Potability column.\nTry applying the facet_grid() layer to the plot in order to group the plots by a factor. Make sure to use the ~ before the column name!\n(Note - the data is quite messy so don’t worry if the results do not separate as much as you would like - real data is messy!)",
    "crumbs": [
      "Content",
      "Day 1"
    ]
  },
  {
    "objectID": "content/day-2.html",
    "href": "content/day-2.html",
    "title": "Python Example",
    "section": "",
    "text": "For a picture of a line plot on a polar axis, see Figure 1.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 4 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Content",
      "Python Example"
    ]
  },
  {
    "objectID": "intro/course-schedule.html",
    "href": "intro/course-schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "Course Schedule\n\n\n\n\n\n\n\n\n\n\nCBW’s Introduction to R workshop (INR) 2024\n\n\n\n\n\n\n\n\nDay 1\n\nDay 2\n\n\n\n\nJune 11\n\nJune 12\n\n\n\n\nTime (EDT)\nModule\nTime (EDT)\nModule\n\n\n\n8:30\nArrivals & Check-in\n8:30\nArrivals\n\n\n\n9:00\nWelcome (Nia Hughes)\n9:00\nReview & Module 3: Loops and functions (Frances Wong)\n\n\n\n9:30\nModule 1: Getting to Know R (Frances Wong)\n10:00\nBreak (15min)\n\n\n\n10:30\nBreak (15min)\n10:15\nModule 3: Loops and functions (cont’d)\n\n\n\n10:45\nModule 1: Getting to Know R (cont’d)\n11:00\nBreak (15min)\n\n\n\n11:15\nBreak (15min)\n11:15\nModule 3: Loops and functions (cont’d)\n\n\n\n11:30\nModule 1: Getting to Know R (cont’d)\n12:00\nClass Photo + Break (1h)\n\n\n\n12:00\nBreak (1h)\n13:00\nModule 4: Linear regression (Frances Wong)\n\n\n\n13:00\nModule 2: Exploring your data in R (Frances Wong)\n14:00\nBreak (15min)\n\n\n\n14:00\nBreak (15min)\n14:15\nModule 4: Linear regression (cont’d)\n\n\n\n14:15\nModule 2: Exploring your data in R (cont’d)\n15:15\nBreak (15min)\n\n\n\n15:15\nBreak (15min)\n15:30\nShort Project\n\n\n\n15:30\nReview and Short project\n17:00\nSurvey & Closing Remarks\n\n\n\n17:30\nFinished\n17:30\nFinished\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Introduction",
      "Course Schedule"
    ]
  }
]